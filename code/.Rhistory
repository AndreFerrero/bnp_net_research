#–– 1. Compile the C++ code ––
# (make sure your working directory contains sample_net_cpp.cpp)
if (!requireNamespace("Rcpp", quietly=TRUE)) install.packages("Rcpp")
library(Rcpp)
Rcpp::sourceCpp("sample_net_cpp.cpp")
setwd("C:/Users/anferrer/OneDrive - Alma Mater Studiorum Università di Bologna/University/Internship/research/code")
#–– 1. Compile the C++ code ––
# (make sure your working directory contains sample_net_cpp.cpp)
if (!requireNamespace("Rcpp", quietly=TRUE)) install.packages("Rcpp")
library(Rcpp)
Rcpp::sourceCpp("sample_net_cpp.cpp")
Rcpp::sourceCpp("sample_net_cpp.cpp")
Rcpp::sourceCpp("sample_net_cpp.cpp")
#–– 2. Run a small test ––
set.seed(42)
N_test  <- 1000
alpha1  <- 1.0
alpha2  <- 2.0
sigma1  <- 0.5
sigma2  <- 0.3
edges <- sample_net_cpp(
N      = N_test,
alpha1 = alpha1,
alpha2 = alpha2,
sigma1 = sigma1,
sigma2 = sigma2
)
#–– 5. (Optional) Plot the frequency of assignments per cluster ––
if (!requireNamespace("ggplot2", quietly=TRUE)) install.packages("ggplot2")
library(ggplot2)
theme_minimal()
View(edges)
hist(edges$X_A)
N_test  <- 1000
alpha1  <- 5.0
alpha2  <- 5.0
sigma1  <- 0.5
sigma2  <- 0.5
edges <- sample_net_cpp(
N      = N_test,
alpha1 = alpha1,
alpha2 = alpha2,
sigma1 = sigma1,
sigma2 = sigma2
)
#–– 3. Inspect the first few edges ––
head(edges)
hist(edges$X_A)
barplot(table(edges$X_A))
#–– 0. Install / load dependencies ––
if (!requireNamespace("Rcpp", quietly=TRUE)) install.packages("Rcpp")
if (!requireNamespace("microbenchmark", quietly=TRUE)) install.packages("microbenchmark")
library(Rcpp)
library(microbenchmark)
#–– 1. Source the C++ implementation ––
Rcpp::sourceCpp("sample_net_cpp.cpp")
#–– 2. Define a pure-R version (using py_predictive_draw3) for comparison ––
py_predictive_draw3 <- function(alpha, sigma, n, counts, idx_list) {
k    <- length(idx_list)
prob <- c(counts[idx_list] - sigma, alpha + sigma * k) / (alpha + n)
sample(c(idx_list, k + 1), 1, prob = prob)
}
sample_net_R <- function(N, alpha, sigma = c(0, 0)) {
alpha1 <- alpha[1]; alpha2 <- alpha[2]
sigma1 <- sigma[1]; sigma2 <- sigma[2]
x <- y <- integer(N)
counts_x <- counts_y <- integer(N)  # oversize
idx_x <- idx_y <- integer(N)        # track active clusters
x[1] <- y[1] <- 1
counts_x[1] <- counts_y[1] <- 1
idx_list_x <- idx_list_y <- 1L
for (i in 2:N) {
x[i] <- py_predictive_draw3(alpha1, sigma1, i-1,
counts_x, idx_list_x)
counts_x[x[i]] <- counts_x[x[i]] + 1
if (counts_x[x[i]] == 1) idx_list_x <- c(idx_list_x, x[i])
y[i] <- py_predictive_draw3(alpha2, sigma2, i-1,
counts_y, idx_list_y)
counts_y[y[i]] <- counts_y[y[i]] + 1
if (counts_y[y[i]] == 1) idx_list_y <- c(idx_list_y, y[i])
}
data.frame(X_A = x, X_B = y)
}
#–– 3. Quick sanity check ––
set.seed(42)
test_cpp <- sample_net_cpp(1000, 1.0, 1.0, 0.5, 0.5)
test_R   <- sample_net_R(1000, c(1.0, 1.0), c(0.5, 0.5))
stopifnot(nrow(test_cpp) == nrow(test_R))  # same size
message("Basic sanity check passed.")
#–– 4. Microbenchmark comparison ––
# Use a smaller N for the R version or it'll take too long
N_small <- 10000
mb <- microbenchmark(
R_version  = sample_net_R(N_small, c(5,5), c(0.5,0.5)),
Cpp_version= sample_net_cpp(N_small, 5, 5, 0.5, 0.5),
times = 10L,
unit  = "s"
)
print(mb)
autoplot(mb)  # requires ggplot2; optional
#–– 5. Interpret ––
# The printed summary gives you min/median/max runtimes for each.
# You should see the Cpp version several-fold faster.
#–– 0. Install / load dependencies ––
if (!requireNamespace("Rcpp", quietly=TRUE)) install.packages("Rcpp")
if (!requireNamespace("microbenchmark", quietly=TRUE)) install.packages("microbenchmark")
library(Rcpp)
library(microbenchmark)
#–– 1. Source the C++ implementation ––
Rcpp::sourceCpp("sample_net_cpp.cpp")
#–– 2. Define a pure-R version (using py_predictive_draw3) for comparison ––
py_predictive_draw3 <- function(alpha, sigma, n, counts, idx_list) {
k    <- length(idx_list)
prob <- c(counts[idx_list] - sigma, alpha + sigma * k) / (alpha + n)
sample(c(idx_list, k + 1), 1, prob = prob)
}
sample_net_R <- function(N, alpha, sigma = c(0, 0)) {
alpha1 <- alpha[1]; alpha2 <- alpha[2]
sigma1 <- sigma[1]; sigma2 <- sigma[2]
x <- y <- integer(N)
counts_x <- counts_y <- integer(N)  # oversize
idx_x <- idx_y <- integer(N)        # track active clusters
x[1] <- y[1] <- 1
counts_x[1] <- counts_y[1] <- 1
idx_list_x <- idx_list_y <- 1L
for (i in 2:N) {
x[i] <- py_predictive_draw3(alpha1, sigma1, i-1,
counts_x, idx_list_x)
counts_x[x[i]] <- counts_x[x[i]] + 1
if (counts_x[x[i]] == 1) idx_list_x <- c(idx_list_x, x[i])
y[i] <- py_predictive_draw3(alpha2, sigma2, i-1,
counts_y, idx_list_y)
counts_y[y[i]] <- counts_y[y[i]] + 1
if (counts_y[y[i]] == 1) idx_list_y <- c(idx_list_y, y[i])
}
data.frame(X_A = x, X_B = y)
}
#–– 3. Quick sanity check ––
set.seed(42)
test_cpp <- sample_net_cpp(1000, 1.0, 1.0, 0.5, 0.5)
test_R   <- sample_net_R(1000, c(1.0, 1.0), c(0.5, 0.5))
stopifnot(nrow(test_cpp) == nrow(test_R))  # same size
message("Basic sanity check passed.")
#–– 4. Microbenchmark comparison ––
# Use a smaller N for the R version or it'll take too long
N_small <- 10000
mb <- microbenchmark(
R_version  = sample_net_R(N_small, c(5,5), c(0.5,0.5)),
Cpp_version= sample_net_cpp(N_small, 5, 5, 0.5, 0.5),
times = 100L,
unit  = "s"
)
print(mb)
autoplot(mb)  # requires ggplot2; optional
#–– 5. Interpret ––
# The printed summary gives you min/median/max runtimes for each.
# You should see the Cpp version several-fold faster.
N_test  <- 1e9
alpha1  <- 5.0
alpha2  <- 5.0
sigma1  <- 0.5
sigma2  <- 0.5
edges <- sample_net_cpp(
N      = N_test,
alpha1 = alpha1,
alpha2 = alpha2,
sigma1 = sigma1,
sigma2 = sigma2
)
rm(edges)
gc()
load("C:/Users/anferrer/OneDrive - Alma Mater Studiorum Università di Bologna/University/Internship/research/alpha_density_results.Rdata")
ggplot(alpha_dens, aes(x = Threshold, y = Density,
group = factor(Simulation),
color = factor(Simulation))) +
geom_line(alpha = 0.3, size = 0.8) +
scale_color_viridis_d(option = "plasma", begin = 0, end = 1) +
labs(x = "Observed Edges",
y = "Density",
color = "Simulation") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
ggplot(alpha_dens, aes(x = threshold, y = Density,
group = factor(Simulation),
color = factor(Simulation))) +
geom_line(alpha = 0.3, size = 0.8) +
scale_color_viridis_d(option = "plasma", begin = 0, end = 1) +
labs(x = "Observed Edges",
y = "Density",
color = "Simulation") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
ggplot(alpha_dens, aes(x = threshold, y = mean_density,
group = factor(Simulation),
color = factor(Simulation))) +
geom_line(alpha = 0.3, size = 0.8) +
scale_color_viridis_d(option = "plasma", begin = 0, end = 1) +
labs(x = "Observed Edges",
y = "Density",
color = "Simulation") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
ggplot(alpha_dens, aes(x = threshold, y = mean_density,
group = factor(simulation),
color = factor(simulation))) +
geom_line(alpha = 0.3, size = 0.8) +
scale_color_viridis_d(option = "plasma", begin = 0, end = 1) +
labs(x = "Observed Edges",
y = "Density",
color = "Simulation") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
load("C:/Users/anferrer/OneDrive - Alma Mater Studiorum Università di Bologna/University/Internship/research/sims/alpha_dens.Rdata")
load("C:/Users/anferrer/OneDrive - Alma Mater Studiorum Università di Bologna/University/Internship/research/alpha_density_results.Rdata")
# --- 5. Density analysis function ---
avg_density_by_alpha <- function(sims_by_alpha,
thresholds,
ncores) {
jobs <- expand.grid(
alpha_name = names(sims_by_alpha),
threshold  = thresholds,
stringsAsFactors = FALSE
)
cl <- parallel::makeCluster(ncores)
on.exit(parallel::stopCluster(cl), add = TRUE)
pboptions(type = "txt", style = 3)
results_list <- pblapply(
seq_len(nrow(jobs)),
cl = cl,
FUN = function(i) {
a_name <- jobs$alpha_name[i]
th     <- jobs$threshold[i]
sims   <- sims_by_alpha[[a_name]]
dens_vec <- vapply(sims, function(net) {
sb <- unique(net[1:th, , drop=FALSE])
ne <- nrow(sb)
nA <- length(unique(sb$X_A))
nB <- length(unique(sb$X_B))
ne / (nA * nB)
}, numeric(1))
data.frame(
alpha        = as.numeric(a_name),
threshold    = th,
mean_density = mean(dens_vec)
)
}
)
avg_df <- do.call(rbind, results_list)
rownames(avg_df) <- NULL
avg_df
}
ggplot(alpha_dens, aes(x = alpha, y = mean_density,
group = factor(threshold),
color = factor(threshold)))+
geom_line(size = 0.5, alpha = 0.6)+
geom_point(size = 3, alpha = 1) +
scale_color_brewer(palette = "Dark2") +
scale_x_continuous(breaks = sort(unique(alpha_dens$alpha))) +
labs(
x     = expression(alpha),
y     = "Average Density",
color = "Network size"
) +
theme_bw() +
theme(
legend.position  = "top",
legend.direction = "horizontal"
)
load("C:/Users/anferrer/OneDrive - Alma Mater Studiorum Università di Bologna/University/Internship/research/sims/alpha_dens.Rdata")
ggplot(alpha_dens, aes(x = alpha, y = mean_density,
group = factor(threshold),
color = factor(threshold)))+
geom_line(size = 0.5, alpha = 0.6)+
geom_point(size = 3, alpha = 1) +
scale_color_brewer(palette = "Dark2") +
scale_x_continuous(breaks = sort(unique(alpha_dens$alpha))) +
labs(
x     = expression(alpha),
y     = "Average Density",
color = "Network size"
) +
theme_bw() +
theme(
legend.position  = "top",
legend.direction = "horizontal"
)
